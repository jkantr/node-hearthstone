#!/usr/bin/env node

var cli = require('cli');
var fs = require('fs');
var Hearthstone = require('../hearthstone');

var Configurator = Hearthstone.Configurator;
var Parser = Hearthstone.Parser;
var Logger = Hearthstone.Logger;

cli.parse({
    'config':           ['c', 'Hearthstone config file (~/Library/Preferences/Blizzard/Hearthstone/log.config)'],
    'input-dir':        ['i', 'Input directory (~/Library/Logs/Unity/Player.log)'],
    'output-dir':       ['o', 'Output directory (~/Documents/hearthstone)'],
    'verbose':          ['v', 'Verbose output']
});

cli.main(function(args, options) {
    var config = options.config ? options.config : Configurator.defaultConfigPath();
    var output = options.output ? options.output : Configurator.defaultOutputPath();
    var input = options.input ? options.input : Configurator.defaultInputPath();
    var configurator = new Configurator(config);

    if (configurator.configNeeded()) {
        this.debug('Configure needed');
        configurator.config();
    } else {
        this.debug('Configure not needed');
    }

    if (!input || !fs.existsSync(input)) {
        this.error("File not found: " + input)
        return 1;
    }

    if (!fs.existsSync(output)) {
        this.ok("Create output directory: " + output)
        fs.mkdir(output);
    }

    var parser = new Parser();
    var logger = new Logger(parser, output);
    parser.on('startup', function(mode){
        cli.info("Hearthstone start up detected.");
    });
    parser.on('mode', function(mode) {
        cli.info("Mode: " + mode);
    });
    parser.on('tag_change', function(data) {
        var type = data['type'];
        var name = data['name'];
        var state = data['state'];
        if (type == "game_start") {
            cli.info("Game Start");
        }
        if (type === "game_over" && logger.game.isCompleted()) {
            cli.info("Game finished: " + name + " " + state);
        }
    });
    parser.parse(input);
});