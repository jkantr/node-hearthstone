#!/usr/bin/env node

var cli = require('cli');
var fs = require('fs');
var touch = require('touch');

var Hearthstone = require('../hearthstone');
var Configurator = Hearthstone.Configurator;
var Parser = Hearthstone.Parser;
var Parsers = Hearthstone.Parsers;
var Logger = Hearthstone.Logger;
var Reporter = Hearthstone.Reporter;

cli.parse({
    'config':           ['c', 'Hearthstone config file (~/Library/Preferences/Blizzard/Hearthstone/log.config)'],
    'input-dir':        ['i', 'Input directory (/Applications/Hearthstone/Logs/)'],
    'output-dir':       ['o', 'Output directory (~/Documents/hearthstone)'],
    'verbose':          ['v', 'Verbose output']
});

cli.main(function(args, options) {
    var config = options.config ? options.config : Configurator.defaultConfigPath();
    var output = options.output ? options.output : Configurator.defaultOutputPath();
    var inputPath = options.input ? options.input : Configurator.defaultInputPath();
    var configurator = new Configurator(config);

    if (configurator.configNeeded()) {
        this.debug('Configure needed');
        configurator.config();
    } else {
        this.debug('Configure not needed');
    }

    if (!inputPath || !fs.existsSync(inputPath)) {
        this.error("Path not found: " + inputPath)
        return 1;
    }

    if (!inputPath.match(/\/$/)) {
        inputPath = inputPath + "/"
    }
    
    if (!config.match(/\/$/)) {
        config = config + "/"
    }

    if (!fs.existsSync(output)) {
        this.ok("Create output directory: " + output)
        fs.mkdir(output);
    }

    for (var parser in Parsers) {
        touch(`${this.inputPath}${parser.filename}`);
    }

    var parser = new Parser();
    var logger = new Logger(parser, output);
    var reporter = new Reporter(parser);
    parser.parse(inputPath);
});